#!/bin/bash
#set -ex
################################################################################
# ContainerOne Konductor IaC Prep & Init                    # User Helper Script
################################################################################
# Working Variables
k9NameVpc=""
k9NameDomain=""
k9NameCluster=""
k9ClusterDomain=""
k9DirDeploy="${HOME}/deploy"
runAnsibleCmd="./site.yml"
################################################################################
# Base Logging
run_log () {
  if   [[ $1 == 0 ]]; then
    echo "   $2"
  elif [[ $1 == 1 ]]; then
    echo "   $2"
    exit 1
  fi
}

################################################################################
# Option Run Ansible Playbook
run_ansible_playbook_bundle () {
while true; do
  read -rp "    >> Would you like to deploy your cluster now? (yes/no): " yn
    case $yn in
      [Yy]* ) echo ;
	      run_log 0 "Executing ansible playbook ${runAnsibleCmd}" ; 
              clear;
              cd ~/deploy/ansible/deploy; 
              ${runAnsibleCmd}; 
              break
              ;;
      [Nn]* ) run_log 0 " >> Exiting now, thank you!" ;
	      break
              ;;
          * ) echo "$SEP_2 Please answer yes or no." ;;
    esac
  break
done
echo
}
################################################################################
# Stage ansible variables
run_stage_deploy_variables () {
run_log 0 "Staging Ansible ${k9DirDeploy}/ansible/k9.yml variables file"
# TODO: protect secrets with: "ansible-vault"
cat <<EOF | tee ${k9DirDeploy}/ansible/cluster-vars.yml
---
target_environment: "fences"
version_openshift: "${varVerOpenshift}"
cluster_domain: "${k9ClusterDomain}"
cluster_name: "${k9NameCluster}"
name_cluster_vpc: "${k9NameVpc}"
name_domain: "${k9NameDomain}"
EOF
echo
}

################################################################################
# Stage UserData
write_user_data_json () {
clear && echo

mkdir -p ${k9DirCluster}/user-data
run_log 0 "Generating RHCOS Bastion node user-data json"
cat <<EOF > ${k9DirCluster}/user-data/bastion.json; echo
{"ignition":{"config":{},"security":{"tls":{}},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{"users":[{"name":"core","sshAuthorizedKeys":["$(cat ${k9DirDeploy}/secrets/ssh/id_rsa_cluster_root.pub)"]}]},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Bootstrap node user-data json"
cat <<EOF > ${k9DirCluster}/user-data/bootstrap.json; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${k9ClusterDomain}:8080/bootstrap.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

run_log 0 "Generating RHCOS Master node(s) user-data json"
cat <<EOF > ${k9DirCluster}/user-data/master.json; echo
{"ignition":{"config":{"append":[{"source":"http://registry.${k9ClusterDomain}:8080/master.ign","verification":{}}]},"security":{},"timeouts":{},"version":"2.2.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}
EOF

clear
}

################################################################################
# Prompt user for aws keys
usr_prompt_aws_keys () {
  clear && echo
  run_log 0 "AWS GovCloud IAM Credentials Web Panel:" ;
  run_log 0 "  https://console.amazonaws-us-gov.com/iam/home#/security_credentials" ;
  echo
  run_log 0 "AWS Commercial IAM Security Credentials Web Panel:" ; 
  run_log 0 "  https://console.aws.amazon.com/iam/home#/security_credentials" ; 
  echo
  run_log 0 "Click on 'Create access key'"
  # Prompt user to paste secret
  echo
  read  -rp "    >> Please copy/paste your AWS 'Access Key ID': " access_KEYID;
  read -srp "    >> Please copy/paste your AWS 'Secret Access Key' (Secret is masked): " access_KEYSECRET;

mkdir -p ${k9DirDeploy}/secrets/aws
cat <<EOF > ${k9DirDeploy}/secrets/aws/credentials
; https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
[default]
aws_access_key_id = ${access_KEYID}
aws_secret_access_key = ${access_KEYSECRET}
EOF
}

################################################################################
# One Time Artifact Environment Staging
run_init_stage () {
# Create directory structure
#mkdir -p ${k9DirDeploy}/{log,auth,ssl,data,registry,user-data,mirror,repos,ansible,terraform,secrets,bak/openshift/,bak/.docker,.docker,.ssh,.aws}

# Stage environment variables
mkdir -p ${k9DirDeploy}/config
cat <<EOF > ${k9DirDeploy}/config/environment
export k9DirDeploy="\${HOME}/deploy"
export versOCP="${versOCP}"
export k9NameVpc="${k9NameVpc}"
export k9NameDomain="${k9NameDomain}"
export k9NameCluster="${k9NameCluster}"
export k9ClusterDomain="${k9ClusterDomain}"
export k9DirCluster="${k9DirCluster}"
EOF

}

################################################################################
# One Time Artifact Environment Staging
run_init_usr_prompt () {
  # Verify Information
  prompt_verify () {
    echo " 
    Artifact Environment Variables:
      VPC Name:       ${k9NameVpc}
      Cluster Name:   ${k9NameCluster}
      Base Domain:    ${k9NameDomain}
      Cluster Domain: ${k9ClusterDomain}
    "

  while true; do
    read -p "    Please confirm these details are correct (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "User Confirmed. Continuing ..." ;
	      break
	      ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
  }

  # Prompt user for AWS VPC Name
  prompt_k9NameVpc () {
    read -p '
    Please enter your AWS VPC name: ' k9NameVpc
  }

  # Prompt user for AWS VPC Name
  prompt_k9NameCluster () {
  echo "
    Please enter a cluster name which will be prepended to the Base Domain
    This is a unique and arbitrary name which will be appended as a subdomain.
      Example entry:
        cluster
      Which would prepend to become:
        cluster.cloud.com
        cluster.anchovy.dev"
  read -p '    Cluster Name: ' k9NameCluster
  k9ClusterDomain="${k9NameCluster}.${k9NameDomain}"
  k9DirCluster="${k9DirDeploy}/cluster"
  }

  # Prompt user for Base Domain Name
  prompt_k9NameDomain () {
  echo "
    Please enter a base domain name for this environment
    This may be an arbitrary local only domain, or a domain you own the rights to.
      Example:
      Example:             
        cloud.com
        anchovy.dev"
  read -p '    Base Domain : ' k9NameDomain ;
  }

  # Call subroutines
  sub_run () {
    clear && echo
    prompt_k9NameDomain
    prompt_k9NameCluster
    prompt_k9NameVpc
    prompt_verify
  }

sub_run
}

################################################################################
# User Introduction
run_info () {
clear
run_log 0 "
    Welcome to the ContainerOne OpenShift Artifact Prep Utility.
    This will walk you through your OpenShift on AWS prerequisites:

      1. AWS Admin Credentials:

           GovCloud Credentials:
             @ https://console.amazonaws-us-gov.com/iam/home#/security_credentials
           Commercial Credentials:
             @ https://console.aws.amazon.com/iam/home#/security_credentials


      2. A Red Hat Developer or Subscription account:

           Developer Sign up          @ https://developers.redhat.com/register/
           Commercial Register/Login  @ https://access.redhat.com


      3. Quay Pull Secret from the UPI OpenShift Cluster Manager Portal:
            @ https://cloud.redhat.com/openshift/install/metal/user-provisioned

"
  while true; do
    read -p "    Are you ready to continue? (Yes/No): " verify
    case ${verify} in
      [Yy]* ) run_log 0 "Continuing ..." ;
	      break
	      ;;
      [Nn]* ) run_log 1 "User Rejected.  Terminating ..." ;;
          * ) run_log 3 "Please answer Yes or No"         ;;
    esac
  done
}

# Function call order
run () {
  run_info
  run_init_usr_prompt
  run_init_stage
  usr_prompt_aws_keys 
  write_user_data_json
  run_stage_deploy_variables
  run_ansible_playbook_bundle
}

run
