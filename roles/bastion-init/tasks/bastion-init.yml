---
- name: ocp4-deploy | task03-deploy | Create docker config directory
  file:
    path: "{{ home_directory }}/.docker"
    state: directory

- name: ocp4-deploy | task03-deploy | Copy credentials to directory
  copy:
    src: "{{ artifact_directory }}/.docker/master.json"
    dest: "{{ home_directory }}/.docker/config.json"

- name: ocp4-deploy | task03-deploy | Register AWS access key ID
  shell: "cat ${dirArtifacts}/.aws/govcloud.credentials | grep aws_access_key_id | awk '{print $3}'"
  register: aws_access_key

- name: ocp4-deploy | task03-deploy | Register AWS secret access key
  shell: "cat ${dirArtifacts}/.aws/govcloud.credentials | grep aws_secret_access_key | awk '{print $3}'"
  register: aws_secret_key

- set_fact:
    aws_access_key: "{{ aws_access_key.stdout }}"
    aws_secret_key: "{{ aws_secret_key.stdout }}"

- name: ocp4-deploy | task03-deploy | Get registry private IP address
  ec2_instance_info:
    filters:
      tag:Name: "{{ vpc_name }}-registry-node"
      instance-state-name: "running"
    region: "{{ ec2_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: registry_private_ip

- set_fact:
    registry_private_ip: "{{ registry_private_ip.instances | map(attribute='private_ip_address') | list }}"

- name: ocp4-deploy | task03-deploy | Create ~/.ssh/config file from template
  template:
    src: config.j2
    dest: "{{ home_directory }}/.ssh/config"
    mode: 0600

