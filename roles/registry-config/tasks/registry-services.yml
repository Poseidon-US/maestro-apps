---
# This tarball is generated in the previous playbook
- name: ocp4-deploy | task03-registry | Copy artifact tarball to the registry
  become: false
  copy:
    src: "{{ home_directory }}/PlatformOne.tar.gz"
    dest: "/tmp/PlatformOne.tar.gz"

- name: ocp4-deploy | task03-registry | Make dockerconfig directory
  file:
    state: directory
    path: "/root/.docker"
    mode: 0755

- name: ocp4-deploy | task03-registry | Copy credentials to directory
  copy:
    src: "{{ artifact_directory }}/.docker/master.json"
    dest: "/root/.docker/config.json"


- name: ocp4-deploy | task03-registry | Extract tarballs
  command:
    "tar xvzf /tmp/PlatformOne.tar.gz -C {{ home_directory }}"
  args:
    creates: "{{ base_directory }}"

# Load local images into podman
- name: ocp4-deploy | task03-registry | Load nginx image into local cache
  command: "{{ item }}"
  with_items:
    - "podman load -i {{ base_directory}}/images/docker-nginxlatest-image.tar"
    - "podman load -i {{ base_directory}}/images/docker-registry2-image.tar"

- name: ocp4-deploy | task03-registry | Prepare web root for nginx server
  file:
    path: "{{ artifact_directory }}/data"
    recurse: true
    mode: 0755
    
- name: ocp4-deploy | task03-registry | Check for nginx service
  shell: podman container ls
  register: nginxCheck

- name: ocp4-deploy | task03-registry | Start nginx server
  shell: |
    podman run                                                   \
    --name=nginx                                                 \
    --rm                                                         \
    --detach                                                     \
    --net=host                                                   \
    --privileged                                                 \
    --volume {{ artifact_directory }}/data:/usr/share/nginx/html:z \
    docker.io/library/nginx:latest
  when: '"nginx" not in nginxCheck.stdout'

- name: ocp4-deploy | task03-registry | Write auth credentials for registry service
  shell: |
    podman run                                     \
    --rm                                           \
    --entrypoint htpasswd                          \
    registry:2                                     \
    -Bbn {{ vpc_name }} {{ vpc_name }} > {{ artifact_directory }}/auth/htpasswd

- name: ocp4-deploy | task03-registry | Check for registry service
  shell: podman container ls
  register: registryCheck

- name: ocp4-deploy | task03-registry | Start registry service
  shell: |
    podman run                                                              \
    --name registry                                                         \
    --detach                                                                \
    --net=host                                                              \
    --privileged                                                            \
    --restart=always                                                        \
    --publish 443:443                                                       \
    --publish 5000:5000                                                     \
    --env REGISTRY_HTTP_ADDR=0.0.0.0:443                                    \
    --env "REGISTRY_AUTH=htpasswd"                                          \
    --env REGISTRY_AUTH_HTPASSWD_PATH=/root/auth/htpasswd                   \
    --volume {{ artifact_directory }}/auth/htpasswd:/root/auth/htpasswd:z     \
    --env REGISTRY_HTTP_TLS_KEY=/root/ssl/{{ cluster_domain }}.key          \
    --env REGISTRY_HTTP_TLS_CERTIFICATE=/root/ssl/{{ cluster_domain }}.crt  \
    --volume {{ artifact_directory }}/ssl:/root/ssl                           \
    --env "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"                     \
    --volume {{ artifact_directory }}/registry:/var/lib/registry:z            \
    docker.io/library/registry:2
  when: '"registry" not in nginxCheck.stdout'

- name: ocp4-deploy | task03-registry | Update the certificate trust on the server
  copy:
    src: "{{ artifact_directory }}/ssl/{{ cluster_domain }}.crt"
    dest: "/etc/pki/ca-trust/source/anchors/{{ cluster_domain }}.crt"
  register: certs

- name: ocp4-deploy | task03-registry | Run update-ca-trust
  shell: /usr/bin/update-ca-trust
  when: certs.changed

# ToDO: Need to make this idempotent - This will always report 'changed'
- name: ocp4-deploy | task03-registry | Load ocp4 images into mirrored registry
  shell: "oc image mirror -a ~/.docker/config.json --dir={{ base_directory }}/mirror file://openshift/release:{{ ocp_version }}* registry.{{ cluster_domain }}/ocp-{{ ocp_version }}"
  #register: mirror_up
  #failed_when: Stuff happens

